@page "/chat/{To}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Mvc
@using autochat_blazorapp.Data
@using autochat_blazorapp.Models
@using autochat_blazorapp.Common
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager

<div class="top-row px-4">
    <p>You are connected as <b>@user</b> <p> To : </p> <b>@To</b></p>
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
</div>


<div class="content px-4">
    <div id="scrollbox">

        @foreach (var item in messages)
        {
            <div class="@item.CSS">
                <div class="user">@item.Username</div>
                <div class="msg">@item.Body</div>
            </div>
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@message"></textarea>
        <button class="btn btn-default" @onclick="@SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string To { get; set; }

    HubConnection connection;
    string user;
    string message;
    List<Message> messages;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (httpContextAccessor.HttpContext.Items
     .TryGetValue(HttpContextItemsMiddleware.HttpContextItemsMiddlewareKey,
         out var middlewareSetValue))
        {
            user = Convert.ToString(middlewareSetValue);
        }

        messages = new List<Message>();

        connection = new HubConnectionBuilder().WithUrl("https://localhost:5001/chatHub").Build();
        connection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            var isMine = string.Equals(username, this.user, StringComparison.CurrentCultureIgnoreCase);
            var newMsg = new Message(username, message, isMine);
            messages.Add(newMsg);
            StateHasChanged();
        });

        await connection.StartAsync();
        await Register();
    }

    async Task Register()
    {
        await connection.SendAsync("Register", user);
    }

    async void SendMessage()
    {
        if (string.IsNullOrEmpty(To)) return;

        await connection.SendAsync("SendMessage", user, message, To);

        MineAddLine(user, message);
    }

    void MineAddLine(string user, string message)
    {
        var newMsg = new Message(user, message, true);
        messages.Add(newMsg);
        StateHasChanged();
    }

    async void DisconnectAsync()
    {
        await connection.StopAsync();
        await connection.DisposeAsync();

         NavigationManager.NavigateTo("/");
    }

    class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }
}
